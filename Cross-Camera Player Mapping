{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f2c9c9a2",
   "metadata": {
    "papermill": {
     "duration": 0.002901,
     "end_time": "2025-07-12T16:34:32.089099",
     "exception": false,
     "start_time": "2025-07-12T16:34:32.086198",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Install YOLO "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "13112da3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-12T16:34:32.095092Z",
     "iopub.status.busy": "2025-07-12T16:34:32.094808Z",
     "iopub.status.idle": "2025-07-12T16:35:45.461611Z",
     "shell.execute_reply": "2025-07-12T16:35:45.460773Z"
    },
    "papermill": {
     "duration": 73.371626,
     "end_time": "2025-07-12T16:35:45.463351",
     "exception": false,
     "start_time": "2025-07-12T16:34:32.091725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m26.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m98.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m77.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m47.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m7.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m28.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m12.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m5.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m34.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install -q ultralytics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1275816",
   "metadata": {
    "papermill": {
     "duration": 0.019452,
     "end_time": "2025-07-12T16:35:45.505782",
     "exception": false,
     "start_time": "2025-07-12T16:35:45.486330",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "36447209",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-12T16:35:45.548298Z",
     "iopub.status.busy": "2025-07-12T16:35:45.547488Z",
     "iopub.status.idle": "2025-07-12T16:35:58.383196Z",
     "shell.execute_reply": "2025-07-12T16:35:58.382343Z"
    },
    "papermill": {
     "duration": 12.858561,
     "end_time": "2025-07-12T16:35:58.384545",
     "exception": false,
     "start_time": "2025-07-12T16:35:45.525984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating new Ultralytics Settings v0.0.6 file ✅ \n",
      "View Ultralytics Settings with 'yolo settings' or at '/root/.config/Ultralytics/settings.json'\n",
      "Update Settings with 'yolo settings key=value', i.e. 'yolo settings runs_dir=path/to/dir'. For help see https://docs.ultralytics.com/quickstart/#ultralytics-settings.\n",
      "/kaggle/input/dataset-video/15sec_input_720p.mp4\n",
      "/kaggle/input/dataset-video/tacticam.mp4\n",
      "/kaggle/input/dataset-video/broadcast.mp4\n",
      "/kaggle/input/best/pytorch/default/1/best.pt\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd \n",
    "from ultralytics import YOLO\n",
    "import cv2\n",
    "import json\n",
    "import os\n",
    "import torch\n",
    "import torchvision.models as models\n",
    "import torchvision.transforms as transforms\n",
    "from PIL import Image\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a6c561b",
   "metadata": {
    "papermill": {
     "duration": 0.019689,
     "end_time": "2025-07-12T16:35:58.424221",
     "exception": false,
     "start_time": "2025-07-12T16:35:58.404532",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Paths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aa2022ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-12T16:35:58.465797Z",
     "iopub.status.busy": "2025-07-12T16:35:58.464957Z",
     "iopub.status.idle": "2025-07-12T16:35:58.469860Z",
     "shell.execute_reply": "2025-07-12T16:35:58.469181Z"
    },
    "papermill": {
     "duration": 0.027202,
     "end_time": "2025-07-12T16:35:58.471152",
     "exception": false,
     "start_time": "2025-07-12T16:35:58.443950",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Paths\n",
    "broadcast_path = '/kaggle/input/dataset-video/broadcast.mp4'\n",
    "tacticam_path = '/kaggle/input/dataset-video/tacticam.mp4'\n",
    "model_path = '/kaggle/input/dataset-video/best.pt'\n",
    "\n",
    "# Output directories\n",
    "os.makedirs(\"/kaggle/working/outputs/detections\", exist_ok=True)\n",
    "os.makedirs(\"/kaggle/working/outputs/features\", exist_ok=True)\n",
    "os.makedirs(\"/kaggle/working/outputs/matches\", exist_ok=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b69b9604",
   "metadata": {
    "papermill": {
     "duration": 0.020015,
     "end_time": "2025-07-12T16:35:58.511222",
     "exception": false,
     "start_time": "2025-07-12T16:35:58.491207",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load YOLOv11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "31673bef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-12T16:35:58.553184Z",
     "iopub.status.busy": "2025-07-12T16:35:58.552344Z",
     "iopub.status.idle": "2025-07-12T16:36:02.058938Z",
     "shell.execute_reply": "2025-07-12T16:36:02.058279Z"
    },
    "papermill": {
     "duration": 3.529037,
     "end_time": "2025-07-12T16:36:02.060388",
     "exception": false,
     "start_time": "2025-07-12T16:35:58.531351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Load model\n",
    "model = YOLO('/kaggle/input/best/pytorch/default/1/best.pt')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfb417a5",
   "metadata": {
    "papermill": {
     "duration": 0.082896,
     "end_time": "2025-07-12T16:36:02.163571",
     "exception": false,
     "start_time": "2025-07-12T16:36:02.080675",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Detection Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "980be7f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-12T16:36:02.204874Z",
     "iopub.status.busy": "2025-07-12T16:36:02.204618Z",
     "iopub.status.idle": "2025-07-12T16:36:02.210595Z",
     "shell.execute_reply": "2025-07-12T16:36:02.209894Z"
    },
    "papermill": {
     "duration": 0.028471,
     "end_time": "2025-07-12T16:36:02.211780",
     "exception": false,
     "start_time": "2025-07-12T16:36:02.183309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def detect_players(video_path, output_json, frame_skip=5):\n",
    "    cap = cv2.VideoCapture(video_path)\n",
    "    frame_id = 0\n",
    "    detections = []\n",
    "\n",
    "    while cap.isOpened():\n",
    "        ret, frame = cap.read()\n",
    "        if not ret:\n",
    "            break\n",
    "\n",
    "        if frame_id % frame_skip == 0:\n",
    "            results = model.predict(frame, conf=0.3, verbose=False)[0]\n",
    "            for box in results.boxes:\n",
    "                cls = int(box.cls[0])\n",
    "                if cls == 0:  # class 0 = player\n",
    "                    x1, y1, x2, y2 = map(int, box.xyxy[0])\n",
    "                    conf = float(box.conf[0])\n",
    "                    detections.append({\n",
    "                        \"frame_id\": frame_id,\n",
    "                        \"bbox\": [x1, y1, x2, y2],\n",
    "                        \"confidence\": conf\n",
    "                    })\n",
    "\n",
    "        frame_id += 1\n",
    "\n",
    "    with open(output_json, 'w') as f:\n",
    "        json.dump(detections, f)\n",
    "\n",
    "    cap.release()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85acafd6",
   "metadata": {
    "papermill": {
     "duration": 0.019557,
     "end_time": "2025-07-12T16:36:02.252053",
     "exception": false,
     "start_time": "2025-07-12T16:36:02.232496",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Feature Extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3bc706fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-12T16:36:02.293067Z",
     "iopub.status.busy": "2025-07-12T16:36:02.292454Z",
     "iopub.status.idle": "2025-07-12T16:36:03.645919Z",
     "shell.execute_reply": "2025-07-12T16:36:03.645332Z"
    },
    "papermill": {
     "duration": 1.375399,
     "end_time": "2025-07-12T16:36:03.647397",
     "exception": false,
     "start_time": "2025-07-12T16:36:02.271998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Downloading: \"https://download.pytorch.org/models/resnet50-0676ba61.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth\n",
      "100%|██████████| 97.8M/97.8M [00:00<00:00, 184MB/s]\n"
     ]
    }
   ],
   "source": [
    "device = 'cuda' if torch.cuda.is_available() else 'cpu'\n",
    "\n",
    "resnet = models.resnet50(pretrained=True)\n",
    "resnet = torch.nn.Sequential(*list(resnet.children())[:-1])  # remove final layer\n",
    "resnet = resnet.to(device).eval()\n",
    "\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((128, 128)),\n",
    "    transforms.ToTensor()\n",
    "])\n",
    "\n",
    "def extract_features(video_path, detection_json):\n",
    "    cap = cv2.VideoCapture(video_path)\n",
    "    with open(detection_json) as f:\n",
    "        detections = json.load(f)\n",
    "\n",
    "    features = []\n",
    "    for det in detections:\n",
    "        cap.set(cv2.CAP_PROP_POS_FRAMES, det['frame_id'])\n",
    "        ret, frame = cap.read()\n",
    "        if not ret:\n",
    "            continue\n",
    "        x1, y1, x2, y2 = det['bbox']\n",
    "        crop = frame[y1:y2, x1:x2]\n",
    "        if crop.size == 0:\n",
    "            continue\n",
    "        img = Image.fromarray(cv2.cvtColor(crop, cv2.COLOR_BGR2RGB))\n",
    "        img_tensor = transform(img).unsqueeze(0).to(device)\n",
    "\n",
    "        with torch.no_grad():\n",
    "            feat = resnet(img_tensor).squeeze().cpu().numpy()\n",
    "        features.append(feat)\n",
    "\n",
    "    cap.release()\n",
    "    return np.array(features)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3718d7e",
   "metadata": {
    "papermill": {
     "duration": 0.020967,
     "end_time": "2025-07-12T16:36:03.689368",
     "exception": false,
     "start_time": "2025-07-12T16:36:03.668401",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Match Players"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "67c38ee2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-12T16:36:03.732477Z",
     "iopub.status.busy": "2025-07-12T16:36:03.731873Z",
     "iopub.status.idle": "2025-07-12T16:36:03.736136Z",
     "shell.execute_reply": "2025-07-12T16:36:03.735547Z"
    },
    "papermill": {
     "duration": 0.02728,
     "end_time": "2025-07-12T16:36:03.737236",
     "exception": false,
     "start_time": "2025-07-12T16:36:03.709956",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def match_players(broadcast_feats, tacticam_feats):\n",
    "    matched_ids = []\n",
    "    for i, tf in enumerate(tacticam_feats):\n",
    "        sims = cosine_similarity([tf], broadcast_feats)[0]\n",
    "        best_match = int(np.argmax(sims))\n",
    "        matched_ids.append({\n",
    "            \"tacticam_id\": i,\n",
    "            \"matched_broadcast_id\": best_match,\n",
    "            \"similarity\": float(sims[best_match])\n",
    "        })\n",
    "    return matched_ids"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f498557a",
   "metadata": {
    "papermill": {
     "duration": 0.020935,
     "end_time": "2025-07-12T16:36:03.779204",
     "exception": false,
     "start_time": "2025-07-12T16:36:03.758269",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Run Full Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e03f15c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-12T16:36:03.827231Z",
     "iopub.status.busy": "2025-07-12T16:36:03.826517Z",
     "iopub.status.idle": "2025-07-12T16:36:09.856718Z",
     "shell.execute_reply": "2025-07-12T16:36:09.855913Z"
    },
    "papermill": {
     "duration": 6.053986,
     "end_time": "2025-07-12T16:36:09.858291",
     "exception": false,
     "start_time": "2025-07-12T16:36:03.804305",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tacticam ID 0 → Broadcast ID 3 (Sim: 0.89)\n",
      "Tacticam ID 1 → Broadcast ID 1 (Sim: 0.88)\n",
      "Tacticam ID 2 → Broadcast ID 0 (Sim: 0.90)\n"
     ]
    }
   ],
   "source": [
    "# Detection\n",
    "detect_players(broadcast_path, \"/kaggle/working/outputs/detections/broadcast.json\", frame_skip=5)\n",
    "detect_players(tacticam_path, \"/kaggle/working/outputs/detections/tacticam.json\", frame_skip=5)\n",
    "\n",
    "# Feature Extraction\n",
    "broadcast_feats = extract_features(broadcast_path, \"/kaggle/working/outputs/detections/broadcast.json\")\n",
    "tacticam_feats = extract_features(tacticam_path, \"/kaggle/working/outputs/detections/tacticam.json\")\n",
    "\n",
    "# Matching\n",
    "results = match_players(broadcast_feats, tacticam_feats)\n",
    "\n",
    "# Save Results\n",
    "with open(\"/kaggle/working/outputs/matches/match1.json\", \"w\") as f:\n",
    "    json.dump(results, f, indent=2)\n",
    "\n",
    "# Print Sample\n",
    "for r in results[:5]:\n",
    "    print(f\"Tacticam ID {r['tacticam_id']} → Broadcast ID {r['matched_broadcast_id']} (Sim: {r['similarity']:.2f})\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7853955,
     "sourceId": 12450537,
     "sourceType": "datasetVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 398776,
     "modelInstanceId": 378633,
     "sourceId": 469331,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 104.270514,
   "end_time": "2025-07-12T16:36:12.203333",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-12T16:34:27.932819",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
